//
//  CounterBadgePlugin.swift
//  Astro
//
//  Created by Liz Cross on 2015-07-13.
//  Copyright (c) 2015 Mobify Research & Development Inc. All rights reserved.
//

import Foundation
import UIKit
import Astro

// UILabel with insets (e.g. paddings)
class BadgeLabel: UILabel {

    var edgeInsets:UIEdgeInsets = UIEdgeInsetsMake(2.0, 6.0, 2.0, 6.0)

    override func textRectForBounds(bounds: CGRect, limitedToNumberOfLines numberOfLines: Int) -> CGRect {
        var rect = super.textRectForBounds(UIEdgeInsetsInsetRect(bounds, edgeInsets), limitedToNumberOfLines: numberOfLines)

        rect.origin.x -= edgeInsets.left
        rect.origin.y -= edgeInsets.top
        rect.size.width  += (edgeInsets.left + edgeInsets.right);
        rect.size.height += (edgeInsets.top + edgeInsets.bottom);

        return rect
    }

    override func drawTextInRect(rect: CGRect) {
        super.drawTextInRect(UIEdgeInsetsInsetRect(rect, edgeInsets))
    }
}

public class CounterBadgePlugin: Plugin, ViewPlugin {
    public let viewController = UIViewController()

    let imageView = UIImageView()
    let labelView = BadgeLabel()

    var imagePath: String = ""
    var currentCount = 0

    public required init(address: MessageAddress, messageBus: MessageBus, pluginResolver: PluginResolver, options: JsonObject?) {
        super.init(address: address, messageBus: messageBus, pluginResolver: pluginResolver, options: options)

        self.addRpcMethodShim("setImagePath") { params, respond in
            ////////// This will be autogenerated at some point //////////
            if let path: String = MethodShimUtils.getArg(params, key: "path", respond: respond) {
                self.setImagePath(path, respond: respond)
            }
            /////////////////////////////////////////////////////////////
        }

        self.addRpcMethodShim("setCount") { params, respond in
            ////////// This will be autogenerated at some point //////////
            if let count: Int = MethodShimUtils.getArg(params, key: "count", respond: respond) {
                self.setCount(count, respond: respond)
            }
            /////////////////////////////////////////////////////////////
        }

        self.addRpcMethodShim("setBackgroundColor") { params, respond in
            ////////// This will be autogenerated at some point //////////
            if let color: String = MethodShimUtils.getArg(params, key: "color", respond: respond) {
                self.setBackgroundColor(color, respond: respond)
            }
            /////////////////////////////////////////////////////////////
        }

        self.addRpcMethodShim("setTextColor") { params, respond in
            ////////// This will be autogenerated at some point //////////
            if let color: String = MethodShimUtils.getArg(params, key: "color", respond: respond) {
                self.setTextColor(color, respond: respond)
            }
            /////////////////////////////////////////////////////////////
        }

        initImage()
        initCounter()
    }

    func initImage() {
        viewController.view.addSubview(imageView)
        positionImage()
    }

    func initCounter() {
        viewController.view.addSubview(labelView)
        styleCounter()
        positionCounter()
    }

    func styleCounter() {
        labelView.backgroundColor = UIColor.redColor()
        labelView.textColor = UIColor.whiteColor()
        labelView.textAlignment = NSTextAlignment.Center
        labelView.font = UIFont(name: labelView.font.fontName, size: 12)
        labelView.layer.masksToBounds = true
    }

    func positionCounter() {
        labelView.translatesAutoresizingMaskIntoConstraints = false

        let rightContraint = NSLayoutConstraint(item: labelView, attribute: NSLayoutAttribute.Trailing, relatedBy: NSLayoutRelation.Equal, toItem: viewController.view, attribute: NSLayoutAttribute.Trailing, multiplier: 1, constant: -4)
        let topContraint = NSLayoutConstraint(item: labelView, attribute: NSLayoutAttribute.Top, relatedBy: NSLayoutRelation.Equal, toItem: viewController.view, attribute: NSLayoutAttribute.Top, multiplier: 1, constant: 2)

        viewController.view.addConstraint(rightContraint)
        viewController.view.addConstraint(topContraint)
    }

    func positionImage() {
        // Define image constraints
        imageView.translatesAutoresizingMaskIntoConstraints = false
        imageView.contentMode = UIViewContentMode.Center

        let widthContraint = NSLayoutConstraint(item: viewController.view, attribute: NSLayoutAttribute.Width, relatedBy: NSLayoutRelation.Equal, toItem: imageView, attribute: NSLayoutAttribute.Width, multiplier: 1, constant: 0)
        let heightContraint = NSLayoutConstraint(item: viewController.view, attribute: NSLayoutAttribute.Height, relatedBy: NSLayoutRelation.Equal, toItem: imageView, attribute: NSLayoutAttribute.Height, multiplier: 1, constant: 0)
        let centerXContraint = NSLayoutConstraint(item: imageView, attribute: NSLayoutAttribute.CenterX, relatedBy: NSLayoutRelation.Equal, toItem: viewController.view, attribute: NSLayoutAttribute.CenterX, multiplier: 1, constant: 0)
        let centerYContraint = NSLayoutConstraint(item: imageView, attribute: NSLayoutAttribute.CenterY, relatedBy: NSLayoutRelation.Equal, toItem: viewController.view, attribute: NSLayoutAttribute.CenterY, multiplier: 1, constant: 0)

        viewController.view.addConstraint(widthContraint)
        viewController.view.addConstraint(heightContraint)
        viewController.view.addConstraint(centerXContraint)
        viewController.view.addConstraint(centerYContraint)

        // Cannot sizeToFit here because the general UIView class
        // does not have a default implementation for sizeToFit unless
        // you are using constraints
        viewController.view.frame = CGRectMake(0, 0, 44.0, 44.0)
    }

    func updateImage(respond: RpcMethodCallback) {
        if let image = AstroFileUtils.imageForFileUrlString(imagePath, respond: respond) {
            imageView.image = image
        }
    }

    func updateCounter(respond: RpcMethodCallback) {
        labelView.text = "\(currentCount)"
        labelView.alpha = (currentCount > 0) ? 1 : 0
        labelView.sizeToFit()
        labelView.layer.cornerRadius = labelView.frame.size.height/2
    }

    // @RpcMethod
    func setImagePath(path: String, respond: RpcMethodCallback) {
        imagePath = path
        updateImage(respond)
    }

    // @RpcMethod
    func setCount(count: Int, respond: RpcMethodCallback) {
        currentCount = count
        updateCounter(respond)
    }

    // @RpcMethod
    func setBackgroundColor(color: String, respond: RpcMethodCallback) {
        if let backgroundColor = UIColor(hex: color) {
            labelView.backgroundColor = backgroundColor
        }
    }

    // @RpcMethod
    func setTextColor(color: String, respond: RpcMethodCallback) {
        if let textColor = UIColor(hex: color) {
            labelView.textColor = textColor
        }
    }
}
