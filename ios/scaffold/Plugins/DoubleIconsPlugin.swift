//
//  DoubleIconsPlugin.swift
//  scaffold
//
//  Created by Liz Cross on 2015-08-13.
//  Copyright (c) 2015 Mobify. All rights reserved.
//

import Foundation
import Astro

public class DoubleIconsPlugin: Plugin, ViewPlugin, HandlesUserInteraction {
    public let viewController = UIViewController()
    let leftButton: UIControl = UIControl()
    let rightButton: UIControl = UIControl()

    public required init(address: MessageAddress, messageBus: MessageBus, pluginResolver: PluginResolver, options: JsonObject?) {
        super.init(address: address, messageBus: messageBus, pluginResolver: pluginResolver, options: options)

        self.addRpcMethodShim("setLeftIcon") { params, respond in
            ////////// This will be autogenerated at some point //////////
            if let address: MessageAddress = MethodShimUtils.getArg(params, key: "address", respond: respond) {
                self.setLeftIcon(address, respond: respond)
            }
            /////////////////////////////////////////////////////////////
        }

        self.addRpcMethodShim("setRightIcon") { params, respond in
            ////////// This will be autogenerated at some point //////////
            if let address: MessageAddress = MethodShimUtils.getArg(params, key: "address", respond: respond) {
                self.setRightIcon(address, respond: respond)
            }
            /////////////////////////////////////////////////////////////
        }

        leftButton.translatesAutoresizingMaskIntoConstraints = false
        rightButton.translatesAutoresizingMaskIntoConstraints = false

        viewController.view.frame = CGRectMake(0, 0, 88, 44)
        viewController.view.addSubview(leftButton)
        viewController.view.addSubview(rightButton)

        let views = [
            "leftButton": leftButton,
            "rightButton": rightButton
        ]

        //  We use the leftButton & rightButton as reusable containers for the icons
        //  that are set. Icon assets are recommended to be 22Ã—22 for this plugin.
        //
        //  +----------88---------+
        //  |+--------+ +---44---+|
        //  ||        | |        ||     L == self.leftButton
        //  ||    L  44 |    R   |44    R == self.rightButton
        //  ||        | |        ||
        //  |+--------+ +--------+|
        //  +---------------------+
        //             ^
        //    self.viewController

        viewController.view.addConstraints(NSLayoutConstraint.constraintsWithVisualFormat("H:|[leftButton(44)][rightButton(44)]|", options: [], metrics: nil, views: views ))
        viewController.view.addConstraints(NSLayoutConstraint.constraintsWithVisualFormat("V:|[leftButton(44)]|", options: [], metrics: nil, views: views))
        viewController.view.addConstraints(NSLayoutConstraint.constraintsWithVisualFormat("V:|[rightButton(44)]|", options: [], metrics: nil, views: views))

        leftButton.addTarget(self, action: #selector(tapLeftButton), forControlEvents: .TouchUpInside)
        rightButton.addTarget(self, action: #selector(tapRightButton), forControlEvents: .TouchUpInside)
    }

    func tapLeftButton(sender: UIControl) {
        trigger("click:doubleIcons_left")
    }

    func tapRightButton(sender: UIControl) {
        trigger("click:doubleIcons_right")
    }

    private func setPluginInContainer(plugin: ViewPlugin, buttonContainer: UIControl) {
        let pluginView = plugin.viewController.view
        pluginView.userInteractionEnabled = false
        pluginView.translatesAutoresizingMaskIntoConstraints = false

        buttonContainer.subviews.forEach({ $0.removeFromSuperview() })
        buttonContainer.addSubview(pluginView)
        pluginView.pinToSuperviewEdges()

        // these two methods must be called together
        viewController.addChildViewController(plugin.viewController)
        plugin.viewController.didMoveToParentViewController(self.viewController)
    }

    // @RpcMethod
    func setLeftIcon(address: MessageAddress, respond: RpcMethodCallback) {
        if let plugin: ViewPlugin = pluginResolver.pluginInstanceByAddress(address, respond: respond) {
            setPluginInContainer(plugin, buttonContainer: leftButton)
        }
    }

    // @RpcMethod
    func setRightIcon(address: MessageAddress, respond: RpcMethodCallback) {
        if let plugin: ViewPlugin = pluginResolver.pluginInstanceByAddress(address, respond: respond) {
            setPluginInContainer(plugin, buttonContainer: rightButton)
        }
    }
}
