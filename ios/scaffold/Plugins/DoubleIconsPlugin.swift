//
//  DoubleIconsPlugin.swift
//  scaffold
//
//  Created by Liz Cross on 2015-08-13.
//  Copyright (c) 2015 Mobify. All rights reserved.
//

import Foundation
import Astro

public class DoubleIconsPlugin: Plugin, ViewPlugin, HandlesUserInteraction {
    public let viewController = UIViewController()

    var leftIconViewController: UIViewController? {
        willSet {
            if let leftIconViewController = leftIconViewController {
                removeViewController(leftIconViewController)
            }
        }
    }

    var rightIconViewController: UIViewController? {
        willSet {
            if let rightIconViewController = rightIconViewController {
                removeViewController(rightIconViewController)
            }
        }
    }

    func removeViewController(iconViewController: UIViewController) {
        iconViewController.view.removeFromSuperview()

        // these two methods must be called together
        iconViewController.willMoveToParentViewController(nil)
        iconViewController.removeFromParentViewController()
    }

    public required init(address: MessageAddress, messageBus: MessageBus, pluginResolver: PluginResolver, options: JsonObject?) {
        super.init(address: address, messageBus: messageBus, pluginResolver: pluginResolver, options: options)

        self.addRpcMethodShim("setLeftIcon") { params, respond in
            ////////// This will be autogenerated at some point //////////
            if let address: MessageAddress = MethodShimUtils.getArg(params, key: "address", respond: respond) {
                self.setLeftIcon(address, respond: respond)
            }
            /////////////////////////////////////////////////////////////
        }

        self.addRpcMethodShim("setRightIcon") { params, respond in
            ////////// This will be autogenerated at some point //////////
            if let address: MessageAddress = MethodShimUtils.getArg(params, key: "address", respond: respond) {
                self.setRightIcon(address, respond: respond)
            }
            /////////////////////////////////////////////////////////////
        }

        viewController.view.frame = CGRectMake(0, 0, 88.0, 44.0)
    }

    // @RpcMethod
    func setLeftIcon(address: MessageAddress, respond: RpcMethodCallback) {
        if let plugin: ViewPlugin = pluginResolver.pluginInstanceByAddress(address, respond: respond) {
            leftIconViewController = plugin.viewController
            setIcon(plugin, triggerFunctionName: "tapLeftButton:", visualConstraintFormat: "H:|[view]")
        }
    }

    // @RpcMethod
    func setRightIcon(address: MessageAddress, respond: RpcMethodCallback) {
        if let plugin: ViewPlugin = pluginResolver.pluginInstanceByAddress(address, respond: respond) {
            rightIconViewController = plugin.viewController
            setIcon(plugin, triggerFunctionName: "tapRightButton:", visualConstraintFormat: "H:[view]|")
        }
    }

    private func setIcon(plugin: ViewPlugin, triggerFunctionName: String, visualConstraintFormat: String) {
        let pluginViewController = plugin.viewController

        pluginViewController.view.userInteractionEnabled = false
        let pluginView = wrapInUIControl(pluginViewController.view, triggerFunctionName: triggerFunctionName)

        // these two methods must be called together
        viewController.addChildViewController(pluginViewController)
        pluginViewController.didMoveToParentViewController(viewController)

        viewController.view.addSubview(pluginView)

        let widthContraint = NSLayoutConstraint(item: pluginView, attribute: NSLayoutAttribute.Width, relatedBy: NSLayoutRelation.Equal, toItem: viewController.view, attribute: NSLayoutAttribute.Width, multiplier: 0.5, constant: 0)
        let heightContraint = NSLayoutConstraint(item: pluginView, attribute: NSLayoutAttribute.Height, relatedBy: NSLayoutRelation.Equal, toItem: viewController.view, attribute: NSLayoutAttribute.Height, multiplier: 1, constant: 0)

        viewController.view.addConstraint(widthContraint)
        viewController.view.addConstraint(heightContraint)

        viewController.view.addConstraints(NSLayoutConstraint.constraintsWithVisualFormat(visualConstraintFormat, options: [], metrics: nil, views: ["view":pluginView]))
    }

    private func wrapInUIControl(view: UIView, triggerFunctionName: String) -> UIControl {
        let subViewSize = view.frame.size
        let viewRect = CGRect(x: CGFloat(0), y: CGFloat(0), width: subViewSize.width, height: subViewSize.height)

        let uiControl = UIControl(frame: viewRect)
        uiControl.translatesAutoresizingMaskIntoConstraints = false

        uiControl.addSubview(view)

        view.pinToSuperviewEdges()

        uiControl.addTarget(self, action: NSSelectorFromString(triggerFunctionName), forControlEvents: UIControlEvents.TouchUpInside)

        return uiControl
    }

    func tapLeftButton(sender: UIControl) {
        trigger("click:doubleIcons_left")
    }
    
    func tapRightButton(sender: UIControl) {
        trigger("click:doubleIcons_right")
    }
    
}